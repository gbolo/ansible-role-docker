---

# create docker config directoy
- name: create docker config directory
  file:
    path: /etc/docker
    state: directory
    mode: 0600
    owner: root
    group: root

- block:
    # - name: ensure sers exists
    #   getent:
    #     database: passwd
    #     key: "{{ item }}"
    #     # split: ':'
    #   # register: __getent
    #   loop:
    #     "{{ docker_users }}"
    #   loop_control:
    #     label: "username: {{ item }}"
    #   ignore_errors: true
    #
    # - debug:
    #     msg: # "{{ __getent | selectattr('getent_passwd') }}"
    #       - "{{ docker_users }}"
    #       - "{{ getent_passwd.keys()|list }}" ##[user.username]|join(':') }}"

    - name: add users to docker group
      user:
        name: "{{ item }}"
        groups: docker
        append: true
        state: present
      loop:
        "{{ docker_users }}"
      loop_control:
        label: "username: {{ item }}"
      #when:
      #  - __getent.exists

    - name: sets ACL for docker_users on /var/run/docker.sock
      acl:
        path: /var/run/docker.sock
        entity: "{{ item }}"
        etype: user
        permissions: rw
        # default: yes
        state: present
      loop:
        "{{ docker_users }}"
      loop_control:
        label: "username: {{ item }}"

  when:
    - docker_users is defined
    - docker_users | count > 0

# push client config if enabled
- block:
    - name: create docker client config directory
      file:
        state: directory
        path: "{{ docker_client_config.location | dirname }}"
        mode: 0750

    - name: configure docker client config.json
      template:
        src: "config.json.j2"
        dest: "{{ docker_client_config.location }}"
        mode: 0440
  when:
    - docker_client_config.enabled

# configure proxy settings if enabled
- block:
    - name: create dropin directory
      file:
        path: "/etc/systemd/system/docker.service.d"
        state: "directory"
        mode: 0750
        owner: root
        group: root

    - name: create systemd dropin to using configuration
      template:
        src: systemd/overwrite.conf.j2
        dest: "/etc/systemd/system/docker.service.d/overwrite.conf"
        mode: 0644
        owner: root
        group: root
      notify:
        - daemon-reload
      # when:
      #   - _changed_docker_configuration is defined
      #   - _changed_docker_configuration.changed is defined
      #   - _changed_docker_configuration.changed

    - name: create systemd dropin for proxy
      template:
        src: "systemd/proxy.conf.j2"
        dest: "/etc/systemd/system/docker.service.d/proxy.conf"
        mode: 0644
        owner: root
        group: root
      notify:
        - daemon-reload
      when:
        - docker_proxy.enabled
  when:
    - ansible_service_mgr == 'systemd'

- block:
    - name: create openrc config file
      template:
        src: openrc/conf.d/docker.j2
        dest: /etc/conf.d/docker
        mode: 0644
        owner: root
        group: root
      notify:
        - daemon-reload
  when:
    - ansible_service_mgr == 'openrc'

- name: flush handlers at this point to avoid double restart
  meta: flush_handlers

- name: configure docker daemon.json
  docker_common_config:
    state: present
    log_driver: "{{ docker_config.log_driver | default(omit) }}"
    log_opts: "{{ docker_config.log_opts | default(omit) }}"
    log_level: "{{ docker_config.log_level | default(omit) }}"
    dns: "{{ docker_config.dns | default(omit) }}"
    dns_opts: "{{ docker_config.dns_opts | default(omit) }}"
    dns_search: "{{ docker_config.dns_search | default(omit) }}"
    data_root: "{{ docker_config.data_root | default(omit) }}"
    max_concurrent_downloads: "{{ docker_config.max_concurrent_downloads | default(omit) }}"
    max_concurrent_uploads: "{{ docker_config.max_concurrent_uploads | default(omit) }}"
    max_download_attempts: "{{ docker_config.max_download_attempts | default(omit) }}"
    metrics_addr: "{{ docker_config.metrics_addr | default(omit) }}"
    debug: "{{ docker_config.debug | default(omit) }}"
    selinux_enabled: "{{ docker_config.selinux_enabled | default(omit) }}"
    seccomp_profile: "{{ docker_config.seccomp_profile | default(omit) }}"
    experimental: "{{ docker_config.experimental | default(omit) }}"
    storage_driver: "{{ docker_config.storage_driver | default(omit) }}"
    storage_opts: "{{ docker_config.storage_opts | default(omit) }}"
    group: "{{ docker_config.group | default(omit) }}"
    bridge: "{{ docker_config.bridge | default(omit) }}"
    bip: "{{ docker_config.bip | default(omit) }}"
    ip: "{{ docker_config.ip | default(omit) }}"
    fixed_cidr: "{{ docker_config.fixed_cidr | default(omit) }}"
    fixed_cidr_v6: "{{ docker_config.fixed_cidr_v6 | default(omit) }}"
    default_gateway: "{{ docker_config.default_gateway | default(omit) }}"
    default_gateway_v6: "{{ docker_config.default_gateway_v6 | default(omit) }}"
    hosts: "{{ docker_config.hosts | default(omit) }}"
    insecure_registries: "{{ docker_config.insecure_registries | default(omit) }}"
    shutdown_timeout: "{{ docker_config.shutdown_timeout | default(omit) }}"
  # register: _changed_docker_configuration
  notify:
    - restart-docker

...
