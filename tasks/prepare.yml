---

- name: include OS specific configuration ({{ ansible_distribution }} ({{ ansible_os_family }}) {{ ansible_distribution_major_version }})
  ansible.builtin.include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      paths:
        - "vars"
      files:
        # eg. debian-10 / ubuntu-20.04 / centos-8 / oraclelinux-8
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}.yaml"
        # eg. archlinux-systemd / archlinux-openrc
        - "{{ ansible_distribution | lower }}-{{ ansible_service_mgr | lower }}.yaml"
        # eg. debian / ubuntu / centos / oraclelinux
        - "{{ ansible_distribution | lower }}.yaml"
        # eg. redhat / debian
        - "{{ ansible_os_family | lower }}.yaml"
        # artixlinux
        - "{{ ansible_os_family | lower | replace(' ', '') }}.yaml"
        - default.yaml
      skip: true

- name: install docker dependencies
  ansible.builtin.package:
    name: "{{ docker_dependencies }}"
    state: present
  when:
    - docker_dependencies is defined
    - docker_dependencies | count > 0

- name: create requirements.txt
  ansible.builtin.template:
    src: requirements.txt.j2
    dest: /tmp/docker-requirements.txt
    mode: 0660

- name: install docker python packages
  ansible.builtin.pip:
    executable: pip3
    requirements: /tmp/docker-requirements.txt
    state: present
  ignore_errors: true
  register: pip_install

- name: merge docker defaults between defaults and custom
  ansible.builtin.set_fact:
    docker_config: "{{ docker_defaults_config | combine(docker_config, recursive=True) }}"
    docker_compose: "{{ docker_defaults_compose | combine(docker_compose, recursive=True) }}"

- name: detect installed docker_compose
  ansible.builtin.stat:
    path: "/usr/local/bin/docker-compose-{{ docker_compose.version }}"
  register: stat_docker_compose_binary
  when:
    - docker_compose is defined
    - docker_compose.install is defined
    - docker_compose.install

...
